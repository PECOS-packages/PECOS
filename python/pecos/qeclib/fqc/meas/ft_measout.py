from pecos.qeclib.fqc.meas.ft_measout_parts import FTMeasOutPart1, FTMeasOutPart2, FTMeasOutPart3, FTMeasOutPart4
from pecos.qeclib.fqc.meas.ft_measout_wasm import FTMeasOutWasm
from pecos.slr import Bit, Block, CReg, QReg


class FTMeasOut(Block):
    """Does the fault-tolerant measure out scheme by Choa and Reichardt... on one logical qubit."""

    # q1: ms [0, 6, 1, 7, 2, 8]
    # q1: ms_c [0, 1, 2]
    def __init__(
        self,
        q: QReg,
        a: QReg,
        check_scratch: CReg,
        msl: list[Bit],
        ms_cl: list[Bit],
        last_syn: CReg,
        flip_bit: Bit,
        stop_bit: Bit,
        destruct_meas_bit: Bit,
        log_out: CReg,
        meas: CReg,
        xflip: CReg,
        zflip: CReg,
        basis: CReg,
        num_q: CReg,
    ) -> None:
        super().__init__()
        self.extend(
            FTMeasOutPart1(
                q,
                a,
                check_scratch,
                [msl[0], msl[1]],
                [ms_cl[0]],
                last_syn,
                flip_bit,
                stop_bit,
                destruct_meas_bit,
            ),
            FTMeasOutPart2(
                q,
                a,
                check_scratch,
                [msl[2], msl[3], msl[1]],
                [ms_cl[0], ms_cl[1]],
                last_syn,
                flip_bit,
                stop_bit,
                destruct_meas_bit,
                log_out,
            ),
            FTMeasOutPart3(
                q,
                a,
                check_scratch,
                [msl[4], msl[5]],
                [ms_cl[2], ms_cl[1]],
                last_syn,
                flip_bit,
                stop_bit,
                destruct_meas_bit,
                log_out,
            ),
            FTMeasOutPart4(
                q,
                destruct_meas_bit,
                meas,
            ),
            FTMeasOutWasm(
                check_scratch,
                msl[1],
                destruct_meas_bit,
                xflip,
                zflip,
                basis,
                log_out,
                meas,
                last_syn,
                num_q,
            ),
        )


class FTMeasOutTwoQubits(Block):
    """Does the fault-tolerant measure out scheme by Choa and Reichardt... on two logical qubits."""

    def __init__(
        self,
        q1: QReg,
        q2: QReg,
        a1: QReg,
        a2: QReg,
        check_scratch1: CReg,
        check_scratch2: CReg,
        ms: CReg,
        ms_c: CReg,
        last_syn1: CReg,
        last_syn2: CReg,
        flip: CReg,
        stop: CReg,
        destruct_meas: CReg,
        log_out1: CReg,
        log_out2: CReg,
        meas1: CReg,
        meas2: CReg,
        xflip: CReg,
        zflip: CReg,
        basis1: CReg,
        basis2: CReg,
        num_q1: CReg,
        num_q2: CReg,
    ) -> None:
        super().__init__()
        self.extend(
            FTMeasOutPart1(
                q1,
                a1,
                check_scratch1,
                [ms[0], ms[6]],
                [ms_c[0]],
                last_syn1,
                flip[0],
                stop[0],
                destruct_meas[0],
            ),
            FTMeasOutPart1(
                q2,
                a2,
                check_scratch2,
                [ms[3], ms[9]],
                [ms_c[3]],
                last_syn2,
                flip[1],
                stop[1],
                destruct_meas[1],
            ),
            FTMeasOutPart2(
                q1,
                a1,
                check_scratch1,
                [ms[1], ms[7], ms[6]],
                [ms_c[0], ms_c[1]],
                last_syn1,
                flip[0],
                stop[0],
                destruct_meas[0],
                log_out1,
            ),
            FTMeasOutPart2(
                q2,
                a2,
                check_scratch2,
                [ms[4], ms[10], ms[9]],
                [ms_c[3], ms_c[4]],
                last_syn2,
                flip[1],
                stop[1],
                destruct_meas[1],
                log_out2,
            ),
            FTMeasOutPart3(
                q1,
                a1,
                check_scratch1,
                [ms[2], ms[8]],
                [ms_c[2], ms_c[1]],
                last_syn1,
                flip[0],
                stop[0],
                destruct_meas[0],
                log_out1,
            ),
            FTMeasOutPart3(
                q2,
                a1,
                check_scratch2,
                [ms[5], ms[11]],
                [ms_c[5], ms_c[4]],
                last_syn2,
                flip[1],
                stop[1],
                destruct_meas[1],
                log_out2,
            ),
            FTMeasOutPart4(
                q1,
                destruct_meas[0],
                meas1,
            ),
            FTMeasOutPart4(
                q2,
                destruct_meas[1],
                meas2,
            ),
            FTMeasOutWasm(
                check_scratch1,
                ms[6],
                destruct_meas[0],
                xflip,
                zflip,
                basis1,
                log_out1,
                meas1,
                last_syn1,
                num_q1,
            ),
            FTMeasOutWasm(
                check_scratch2,
                ms[9],
                destruct_meas[1],
                xflip,
                zflip,
                basis2,
                log_out2,
                meas2,
                last_syn2,
                num_q2,
            ),
        )
